trigger:
- development  # Or your default branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'docker-registry' # Docker Hub service connection name
  imageName: 'michaelakintayo7/docker-hub-repo'
  dockerfilePath: 'Dockerfile'
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  resourceGroup: 'Group-6-Project-webapp'
  aksCluster: 'group6cluster'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install -y php-cli
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
        php composer.phar install
      displayName: 'Install PHP and Composer dependencies'

    # Docker build and push
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageName)'
        dockerfile: '$(dockerfilePath)'
        tags: |
          latest
        buildContext: '$(Build.SourcesDirectory)'

    # Archive build artifacts if necessary
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - job: DeployJob
    displayName: 'Deploy Job'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '5bb2315d-6a24-4f44-9f69-50511bf6e54d'
        scriptType: 'bash'
        scriptPath: '$(System.DefaultWorkingDirectory)/scripts/deploy-to-aks.sh'
        arguments: '--resource-group $(resourceGroup) --aks-cluster $(aksCluster) --image $(imageName):latest'
